Nolan Downey
program: crossword
	From a user's perspective, this program creates a crossword puzzle after reading in a certain number of words (less than 20). It then displays two puzzles, one with the solution to the crossword and one with the crossword with empty spaces. The program also displays clues to the words at the bottom of the screen, with the orientation of each word and clues to the location of the word. There are three ways for the user to run the program: first, he/she can run just the executable, causing the program to enter into interactive mode. In interactive mode, the user can input up to 20 words that are less than 15 characters and greater than 2 characters, and then must place a period to tell the code that they are done placing words. The second way to run the code is the executable followed by the name of an existing data file. This data file should have up to 20 words in a list, followed by a period. Finally, the user can run the program with the exectuable and the name of two different text files. The first one should contain the words and the period, and the second one should be the name of the file which will contain the crossword.
	From a programmer's perspective, the program utilizes a struct and a class for the words and the board, respectively. The class contains methods to check the orientation of the words, place the words, and overload the output to display the board. The program utilizes several for loops and if statements, along with many boolean methods to check and place all the words needed. In the main file, the main function utilizes argc and char *argv[] to determine how to go about running the program. First, the program reads in the words into a vector of structs of the struct Word, and then the program utilizes this vector throughout the rest to determine the different aspects of each word (orientation, row, column, etc.)
	I spent very long checking each of the methods and different sections of main to make sure they work. In these tests, I attempted to cover all the different kinds of errors that could happen, and then account for them in my program. I can attest to the fact that each of the different parts works individually, as I tested them altogether. I will admit that the testing is the toughest part of this lab. Many times I thought my code was working but then I would find a small segmentation fault or something similar. However, I believe I got them all!

	Enjoy!
