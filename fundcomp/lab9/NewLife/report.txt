Nolan Downey
report.txt

	For this week's lab, I created a program that simulates the already created concept of the "Game of Life" by John Horton Conway. Essentially this is a simple simulation of cells which follow two simple rules: if a cell is alive and has two or three alive neighbors, it says alive, and if a cell is dead and has exactly three alive neighbors, it becomes alive. There are more complicated rules than these, but for the sake of my simulation, those are the two simple rules. The program includes three files: lifeboard.h (header file), lifeboard.cpp(implementation file), and life.cpp(main file).
	From a user's perspective, there are two ways to run the program. First, there is interactive mode. Interactive mode displays the board and then waits for the user to input a command. There are five possible commands that can be ran by the user. First, there is 'a', which then waits for the user to input two numbers (which refer to a cell row and column) and then adds an alive cell to that spot. Second, there is 'r', which then also waits for two numbers and then makes the cell in that spot a dead cell. Side note: alive cells are marked with an 'X' and dead cells are blank. Cells that are neither alive or dead are also blank. The next command that a user can input is 'n', which advances the board one iteration based off the rules described above. The final command that stays within the program is 'p', which places the program into an infinite loop, constantly altering the cells based on the rules described above. It is essentially an automated version of the 'n' input. The final command 'q', simply quits the program.
	The second way the user can run the program is called 'batch' mdoe. To run the program in this way, the user must follow the executable name with the name of a data file that contains several of the commands referenced in the previous paragraph. The program will then read in these commands and automatically execute each command, then running the simulation based on the rules. This way, the user can simply use different text files that are programmed to certain, cool still lives, oscillators, and gliders.
	From a programmer's perspective, the program utilizes a class called Life to alter and display two boards, a main board and a temporary board. When the user is making changes, the temporary board is the board that is altered, but before displaying, the main board is changed into the temporary board and then altered. Many different methods of the class are used together to achieve all the little aspects of the program. There is a method to check the surrounding neighbors of the cells, a method to advance the board one iteration based on the rules, and a method to clear the screen so that the simulation looks much more real. Since the iterations are gone through so quickly, the function 'usleep' is called upon to pause the screen for a certain amount of time to make the animations much easier to watch. 
	I also created five scenes for the user to try out in batch mode. The first one shows four still life figures. The second one shows four types of oscillators, the third one displays four gliders, the fourth one starts with a big explosion of life and then ends with a few still life figures and an oscialltor, and the fifth ones demonstrates the word "HEY" and then iterates through the simulation based on the rules.
	Have fun!
	
