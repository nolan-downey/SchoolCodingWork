Part 1 - Identify Objectives
- Write a template class which takes the set of inputs
- Write the function addElement which adds those inputs together and returns the new value
- Need to use template specialization for the type string with a function concatenate() to concatenate the second string to the first string
- All other data types will simply be added together by function addElement
Class Solution
- Read in a set of inputs from the command line, where the first is a char* indicating the type
- Develop a template class that containts a single element
- Create a class method addElement which adds and input to the previously existing addElement
- Create a class method concatenate which concatenates the value

Part 2 - Risks and Alternatives
Risk: The elements that are trying to be added together need to be of the same data type
Alternative: Use a template class which does not specialize data type until needed to
Risk: Need to know if characters are in Unicode or ASCII, since Unicode uses more memory than ASCII
Alternative: We can assume ASCII for this class because Notre Dame student machines
Class Solution
Risk: We need to determine the type that the class is templated to, so we can choose between calling std::string and the others
Alternative: Researching a solution shows we can use the following (#include <typeinfo> typeid returns Ss if string)
Risk: When trying to concatenate a string to a template private member, the code will not compile
Alternative: Based on research of std::string, we can simply use the + operator for concatenate, and template it to any type

Part 3 - Product Development and Testing
- My first guess would be to have two methods in the class, one that returns the sum of two values and one that concatenates a string to another string
- After we determined what data type the element is and whether we have enough arguments, then these elements can be passed to the respective method
Class Solution
- Develop a templated class that stores a private element
- Write a Constructor that calls the default constructor of that template in the member initialization list
- Write a class method addElement that adds a value to the private element
- Write a class method concatenate that calls the + operator for std::string
- Write a const class method getElement that returns the element
- Write an overloaded friend operator<< that prints the element

(Testing)
echo "Running with no following inputs: ./tempSpec"
./tempSpec
echo ""
echo "Run Bad Type: ./tempSpec badTypeName 22 44 57 99"
./tempSpec badTypeName 22 44 57 99
echo ""
echo "Run int but no following inputs: ./tempSpec int"
./tempSpec int
echo ""
echo "Run an int test: ./tempSpec int 10 13 -5 -1 27"
./tempSpec int 10 13 -5 -1 27
echo ""
echo "Run a double test: ./tempSpec double 3.2 7.22 -22.85 10.22"
./tempSpec double 3.2 7.22 -22.85 10.22
echo ""
echo "Run a float test: ./tempSpec float 3.2 7.22 -22.85 10.22"
./tempSpec float 3.2 7.22 -22.85 10.22
echo ""
echo "Run a string test: ./tempSpec std::string Notre Dame Fighting Irish"
./tempSpec std::string Notre Dame Fighting Irish
